#!/bin/bash

#--- matrix operations ---

dims() {
    # Description:
    #   Determines the number of rows and columns of a given matrix
    # Input:
    #   Tab-delimited MxN matrix
    #   Optionally, variable to hold number of rows and 
    #   variable to hold number of columns
    # Output:
    #   If no variables passed in, will output number of rows and 
    #   columns as "ROWS COLS"

    # Get optional arguments, if any
    _numRows=$2
    _numCols=$3

    # Count number of rows in matrix
    local numRows=0
    # Store last line of matrix to count number of columns later
    aline=""
    while read line; do
        numRows=`expr $numRows + 1`
        aline=$line
    done < $1

    # Count number of columns in matrix from previously stored line
    local numCols=0
    for i in $aline; do
        numCols=`expr $numCols + 1`
    done

    # Output "ROWS COLS" if no additional arguments passed to store results
    if [[ "$_numRows" && "$_numCols" ]]; then
        eval $_numRows="'$numRows'"
        eval $_numCols="'$numCols'"
    else
        echo "$numRows $numCols"
    fi
}

transpose() {
    # Description:
    #   Converts an MxN matrix into an NxM matrix
    # Requires dims() function to calculate number of rows and columns
    # Input:
    #   Tab-delimited MxN matrix
    #   Optionally, a variable to hold the transposed matrix
    # Output:
    #   Tab-delimited NxM matrix that is a transposition of input matrix
    #   if optional argument is not supplied

    # Get optional argument if provided
    _transposed=$2
    
    # Store matrix in an array
    index=0
    while read line; do
        for i in $line; do
            array[index]=$i
            index=`expr $index + 1`
        done
    done < $1

    # Get number of rows and columns in matrix
    dims $1 rows cols

    result=""
    # Get values of same column from array and store as tab-delimited row
    for ((i=0; i<cols; i++)); do
        for ((j=0; j<rows; j++)); do
            index=$(( $i + $j*$cols ))
            value=${array[index]}
            result="$result""$value\t"
        done
        # Replace last tab added with newline
        result="${result%??}""\n"
    done

    # Save result to optional argument if supplied; otherwise, output result
    if [[ "$_transposed" ]]; then
        echo -en $result > $_transposed
    else
        echo -en $result
    fi
}

mean() {
    # Description:
    #   Reduces an MxN matrix into a 1xN matrix where each value is the mean
    #   of the original column
    # Requires transpose() function to make values in columns more accessible
    # Input:
    #   Tab-delimited MxN matrix
    # Output:
    #   1xN tab-delimited row of elements where the 1st element is the mean 
    #   of the 1st column, the 2nd the mean of the 2nd column, etc

    # Transpose input matrix so columns become rows
    transpose $1 tempTransposedMatrix

    result=""
    while read line; do
        # Find sum of current row (which was column of input matrix)
        sum=0
        # Also find number of values in current row
        nums=0
        for num in $line; do
            sum=$(( sum + num ))
            nums=$(( nums + 1 ))
        done

        # Calculate mean rounded to nearest 10; half values round away from 0
        if [ $sum -gt 0 ]; then
            mean=`expr \( $sum + \( $nums / 2 \) \* \( 1 \) \) / $nums`
        else
            mean=`expr \( $sum + \( $nums / 2 \) \* \( -1 \) \) / $nums`
        fi
        result="$result""$mean\t"
    done < tempTransposedMatrix

    # Output result, stripping off latest \t added
    echo -e ${result%??}

    rm -f tempTransposedMatrix
}

add() {
    # Description:
    #   Adds two matrices together
    # Requires dims() function to get number of rows and columns of each matrix
    # Input:
    #   Two tab-delimited MxN matrices with same dimensions
    # Output:
    #   MxN matrix where corresponding elements in input matrices are summed

    # Get dimensions of each input matrix
    dims $1 rows1 cols1
    dims $2 rows2 cols2
    # Check if input matrices have same dimensions
    if [[ ($rows1 -eq $rows2) && ($cols1 -eq $cols2) ]]; then
        # Read a line of each matrix simultaneously
        while read line1 <&3 && read line2 <&4; do
            # Store first value from first matrix
            array=""
            index=0
            for i in $line1; do
                array[index]=$i
                index=$(( index + 1 ))
            done
            # Add second value from second matrix
            result=""
            index=0
            for j in $line2; do
                sum=`expr ${array[index]} + $j`
                index=$(( index + 1 ))
                result="$result""$sum\t"
            done
            # Output sum, stripping of last tab added
            echo -e ${result%??}
        done 3<$1 4<$2
    else
        echo -n "Bad input: " 1>&2
        echo "matrix add operation requires matrices with same dimensions" 1>&2
        exit 1
    fi
}

usageErr() {
    echo "Usage:" 1>&2
    echo -e "\tmatrix dims [MATRIX]" 1>&2
    echo -e "\tmatrix transpose [MATRIX]" 1>&2
    echo -e "\tmatrix mean [MATRIX]" 1>&2
    echo -e "\tmatrix add [MATRIX_LEFT] [MATRIX_RIGHT]" 1>&2
    echo -e "\tmatrix multiply [MATRIX_LEFT] [MATRIX_RIGHT]" 1>&2
    exit 1
}

fileErr() {
    echo "Cannot read file $1" 1>&2
    exit 1
}

# Hold user's matrices
temp_matrix1="temp_matrix1_$$"
temp_matrix2="temp_matrix2_$$"
trap "rm -f $temp_matrix1 $temp_matrix2; echo 'CTRL_C received, exiting'; exit 1" INT HUP TERM

# Get data either from stdin or user-specified file(s)
# Handle dims/transpose/mean  with no file specified i.e. read from stdin
if [[ $# = 1 && ($1 = dims || $1 = transpose || $1 = mean) ]]; then
    cat > $temp_matrix1
# Handle dims/transpose/mean with 1 file specified
elif [[ $# = 2 && ($1 = dims || $1 = transpose || $1 = mean) ]]; then
    # Check file is readable
    if [ -r $2 ]; then
        temp_matrix1=$2
    else
        fileErr $2
    fi
# Handle add/multiply with 2 files specified
elif [[ $# = 3 && ($1 = add || $1 = multiply) ]]; then
    # Check files are readable
    if [ -r $2 ]; then
        if [ -r $3 ]; then
            temp_matrix1=$2
            temp_matrix2=$3
        else
            fileErr $3
        fi
    else
        fileErr $2
    fi
else
    usageErr
fi

if [ $1 = dims ]; then
    dims $temp_matrix1
elif [ $1 = transpose ]; then
    transpose $temp_matrix1
elif [ $1 = mean ]; then
    mean $temp_matrix1
elif [ $1 = add ]; then
    add $temp_matrix1 $temp_matrix2
fi

rm -f temp_matrix1_* temp_matrix2_*
